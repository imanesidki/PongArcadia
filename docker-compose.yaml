services:

  backend:
    build: ./backend/
    container_name: backend
    command: ["python3", "manage.py", "runserver", "0.0.0.0:8000"]
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    tty: true
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      db:
        condition: service_healthy

    networks:
      - pongarcadia_network

  frontend:
    build: ./frontend
    container_name: frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    tty: true
    networks:
      - pongarcadia_network

  db:
    image: postgres:16
    container_name: postgres
    env_file:
      - ./backend/.env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    tty: true
    networks:
      - pongarcadia_network


networks:
  pongarcadia_network:
    driver: bridge


volumes:
  pgdata:

name: Notify Discord on CI Completion

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Prepare Notification
        id: prepare
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          # Extract workflow run details
          WORKFLOW_NAME="CI"
          WORKFLOW_STATUS="${{ job.status }}"
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          RUN_ID="${{ github.run_id }}"

          # Extract commit details
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          AUTHOR_URL="https://github.com/${AUTHOR_EMAIL%*@*}"
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${COMMIT_SHA}"

          # Determine branch name
          BRANCH="${{ github.ref }}"
          if [[ "$BRANCH" == refs/heads/* ]]; then
            BRANCH=$(echo "$BRANCH" | sed 's/refs\/heads\///')
          else
            BRANCH="N/A"
          fi

          # Extract PR details if available
          PR_URL=""
          PR_TITLE=""
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
          fi

          # Collect individual job statuses
          LINT_STATUS="${{ needs.lintBE.result }}"
          BE_STATUS="${{ needs.backend.result }}"
          FE_STATUS="${{ needs.frontend.result }}"

          # Determine status emojis for jobs
          get_status_emoji() {
            local status=$1
            case "$status" in
              success) echo ":white_check_mark:" ;;
              failure) echo ":x:" ;;
              cancelled) echo ":warning:" ;;
              *) echo ":grey_question:" ;;
            esac
          }

          # Prepare the message
          if [ "$WORKFLOW_STATUS" == "success" ]; then
            STATUS_EMOJI=":white_check_mark:"
          elif [ "$WORKFLOW_STATUS" == "failure" ]; then
            STATUS_EMOJI=":x:"
          elif [ "$WORKFLOW_STATUS" == "cancelled" ]; then
            STATUS_EMOJI=":warning:"
          else
            STATUS_EMOJI=":grey_question:"
          fi

          # Build the message based on the event type
          MESSAGE="**${STATUS_EMOJI} Workflow [$WORKFLOW_NAME]($WORKFLOW_URL) completed with status: $WORKFLOW_STATUS (Run ID: $RUN_ID)**\n"

          if [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
            MESSAGE+="**${STATUS_EMOJI} Push to branch [$BRANCH]: [${COMMIT_MESSAGE}]($COMMIT_URL)**\n"
          elif [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            MESSAGE+="**${STATUS_EMOJI} Pull Request [$PR_TITLE]($PR_URL)**\n"
          fi

          MESSAGE+="**Author:** [${AUTHOR_NAME}]($AUTHOR_URL)\n"
          MESSAGE+="**Commit:** [${COMMIT_MESSAGE}]($COMMIT_URL)\n"
          MESSAGE+="**Branch:** $BRANCH\n"
          MESSAGE+="**Lint Status Job:** $(get_status_emoji "$LINT_STATUS") $LINT_STATUS\n"
          MESSAGE+="**Test Status Job:** $(get_status_emoji "$BE_STATUS") $BE_STATUS\n"
          MESSAGE+="**Build Status Job:** $(get_status_emoji "$FE_STATUS") $FE_STATUS"

          # Export message for the next step
          echo "::set-output name=message::$MESSAGE"

      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": \"${{ steps.prepare.outputs.message }}\"}" $DISCORD_WEBHOOK_URL
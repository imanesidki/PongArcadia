# Generated by Django 4.2.20 on 2025-03-15 05:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('theme', models.CharField(choices=[('fire', 'Fire'), ('water', 'Water')], default='fire', max_length=10)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('waiting', 'Waiting for Players'), ('in_progress', 'In Progress'), ('paused', 'Paused'), ('completed', 'Completed')], default='waiting', max_length=15)),
                ('final_score_player1', models.IntegerField(default=0)),
                ('final_score_player2', models.IntegerField(default=0)),
                ('player1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games_as_player1', to=settings.AUTH_USER_MODEL)),
                ('player2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games_as_player2', to=settings.AUTH_USER_MODEL)),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games_won', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlayerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(choices=[('fire', 'Fire'), ('water', 'Water')], default='fire', max_length=10)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('matches_played', models.IntegerField(default=0)),
                ('matches_won', models.IntegerField(default=0)),
                ('matches_lost', models.IntegerField(default=0)),
                ('first_win', models.BooleanField(default=False)),
                ('pure_win', models.BooleanField(default=False)),
                ('triple_win', models.BooleanField(default=False)),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MatchmakingQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('matched_at', models.DateTimeField(blank=True, null=True)),
                ('difficulty_preference', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('waiting', 'Waiting'), ('matched', 'Matched'), ('timed_out', 'Timed Out')], default='waiting', max_length=10)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matchmaking_entries', to=settings.AUTH_USER_MODEL)),
                ('resulting_game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_from_queue', to='pong_game.game')),
            ],
            options={
                'indexes': [models.Index(fields=['is_active', 'status'], name='pong_game_m_is_acti_9eecde_idx'), models.Index(fields=['difficulty_preference', 'is_active'], name='pong_game_m_difficu_63c4af_idx')],
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_number', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed')], default='in_progress', max_length=15)),
                ('score_player1', models.IntegerField(default=0)),
                ('score_player2', models.IntegerField(default=0)),
                ('winner', models.CharField(blank=True, choices=[('player1', 'Player 1'), ('player2', 'Player 2')], max_length=10, null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='pong_game.game')),
            ],
            options={
                'ordering': ['game', 'match_number'],
                'indexes': [models.Index(fields=['status'], name='pong_game_m_status_e16717_idx')],
                'unique_together': {('game', 'match_number')},
            },
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['status'], name='pong_game_g_status_4b5dc4_idx'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['player1'], name='pong_game_g_player1_39f272_idx'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['player2'], name='pong_game_g_player2_c8e9bb_idx'),
        ),
    ]
